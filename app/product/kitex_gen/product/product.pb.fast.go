// Code generated by Fastpb v0.0.2. DO NOT EDIT.

package product

import (
	fmt "fmt"
	fastpb "github.com/cloudwego/fastpb"
	api "zqzqsb/gomall/app/product/kitex_gen/api"
)

var (
	_ = fmt.Errorf
	_ = fastpb.Skip
)

func (x *Product) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 6:
		offset, err = x.fastReadField6(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 7:
		offset, err = x.fastReadField7(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 8:
		offset, err = x.fastReadField8(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 9:
		offset, err = x.fastReadField9(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 10:
		offset, err = x.fastReadField10(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 11:
		offset, err = x.fastReadField11(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 12:
		offset, err = x.fastReadField12(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 13:
		offset, err = x.fastReadField13(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 14:
		offset, err = x.fastReadField14(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_Product[number], err)
}

func (x *Product) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Id, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Product) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Name, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Product) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Description, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Product) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.Price, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Product) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	x.Stock, offset, err = fastpb.ReadInt32(buf, _type)
	return offset, err
}

func (x *Product) fastReadField6(buf []byte, _type int8) (offset int, err error) {
	x.ImageUrl, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Product) fastReadField7(buf []byte, _type int8) (offset int, err error) {
	var v string
	v, offset, err = fastpb.ReadString(buf, _type)
	if err != nil {
		return offset, err
	}
	x.Gallery = append(x.Gallery, v)
	return offset, err
}

func (x *Product) fastReadField8(buf []byte, _type int8) (offset int, err error) {
	x.Category, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Product) fastReadField9(buf []byte, _type int8) (offset int, err error) {
	x.IsOnSale, offset, err = fastpb.ReadBool(buf, _type)
	return offset, err
}

func (x *Product) fastReadField10(buf []byte, _type int8) (offset int, err error) {
	x.CreateTime, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Product) fastReadField11(buf []byte, _type int8) (offset int, err error) {
	x.UpdateTime, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Product) fastReadField12(buf []byte, _type int8) (offset int, err error) {
	if x.Attributes == nil {
		x.Attributes = make(map[string]string)
	}
	var key string
	var value string
	offset, err = fastpb.ReadMapEntry(buf, _type,
		func(buf []byte, _type int8) (offset int, err error) {
			key, offset, err = fastpb.ReadString(buf, _type)
			return offset, err
		},
		func(buf []byte, _type int8) (offset int, err error) {
			value, offset, err = fastpb.ReadString(buf, _type)
			return offset, err
		})
	if err != nil {
		return offset, err
	}
	x.Attributes[key] = value
	return offset, nil
}

func (x *Product) fastReadField13(buf []byte, _type int8) (offset int, err error) {
	x.Rating, offset, err = fastpb.ReadFloat(buf, _type)
	return offset, err
}

func (x *Product) fastReadField14(buf []byte, _type int8) (offset int, err error) {
	x.SalesCount, offset, err = fastpb.ReadInt32(buf, _type)
	return offset, err
}

func (x *CreateProductReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 6:
		offset, err = x.fastReadField6(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 7:
		offset, err = x.fastReadField7(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 8:
		offset, err = x.fastReadField8(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 9:
		offset, err = x.fastReadField9(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_CreateProductReq[number], err)
}

func (x *CreateProductReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Name, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *CreateProductReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Description, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *CreateProductReq) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Price, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *CreateProductReq) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.Stock, offset, err = fastpb.ReadInt32(buf, _type)
	return offset, err
}

func (x *CreateProductReq) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	x.ImageUrl, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *CreateProductReq) fastReadField6(buf []byte, _type int8) (offset int, err error) {
	var v string
	v, offset, err = fastpb.ReadString(buf, _type)
	if err != nil {
		return offset, err
	}
	x.Gallery = append(x.Gallery, v)
	return offset, err
}

func (x *CreateProductReq) fastReadField7(buf []byte, _type int8) (offset int, err error) {
	x.Category, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *CreateProductReq) fastReadField8(buf []byte, _type int8) (offset int, err error) {
	x.IsOnSale, offset, err = fastpb.ReadBool(buf, _type)
	return offset, err
}

func (x *CreateProductReq) fastReadField9(buf []byte, _type int8) (offset int, err error) {
	if x.Attributes == nil {
		x.Attributes = make(map[string]string)
	}
	var key string
	var value string
	offset, err = fastpb.ReadMapEntry(buf, _type,
		func(buf []byte, _type int8) (offset int, err error) {
			key, offset, err = fastpb.ReadString(buf, _type)
			return offset, err
		},
		func(buf []byte, _type int8) (offset int, err error) {
			value, offset, err = fastpb.ReadString(buf, _type)
			return offset, err
		})
	if err != nil {
		return offset, err
	}
	x.Attributes[key] = value
	return offset, nil
}

func (x *CreateProductResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_CreateProductResp[number], err)
}

func (x *CreateProductResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.ProductId, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *UpdateProductReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 6:
		offset, err = x.fastReadField6(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 7:
		offset, err = x.fastReadField7(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 8:
		offset, err = x.fastReadField8(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 9:
		offset, err = x.fastReadField9(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 10:
		offset, err = x.fastReadField10(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_UpdateProductReq[number], err)
}

func (x *UpdateProductReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Id, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *UpdateProductReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Name, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *UpdateProductReq) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Description, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *UpdateProductReq) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.Price, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *UpdateProductReq) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	x.Stock, offset, err = fastpb.ReadInt32(buf, _type)
	return offset, err
}

func (x *UpdateProductReq) fastReadField6(buf []byte, _type int8) (offset int, err error) {
	x.ImageUrl, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *UpdateProductReq) fastReadField7(buf []byte, _type int8) (offset int, err error) {
	var v string
	v, offset, err = fastpb.ReadString(buf, _type)
	if err != nil {
		return offset, err
	}
	x.Gallery = append(x.Gallery, v)
	return offset, err
}

func (x *UpdateProductReq) fastReadField8(buf []byte, _type int8) (offset int, err error) {
	x.Category, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *UpdateProductReq) fastReadField9(buf []byte, _type int8) (offset int, err error) {
	x.IsOnSale, offset, err = fastpb.ReadBool(buf, _type)
	return offset, err
}

func (x *UpdateProductReq) fastReadField10(buf []byte, _type int8) (offset int, err error) {
	if x.Attributes == nil {
		x.Attributes = make(map[string]string)
	}
	var key string
	var value string
	offset, err = fastpb.ReadMapEntry(buf, _type,
		func(buf []byte, _type int8) (offset int, err error) {
			key, offset, err = fastpb.ReadString(buf, _type)
			return offset, err
		},
		func(buf []byte, _type int8) (offset int, err error) {
			value, offset, err = fastpb.ReadString(buf, _type)
			return offset, err
		})
	if err != nil {
		return offset, err
	}
	x.Attributes[key] = value
	return offset, nil
}

func (x *UpdateProductResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_UpdateProductResp[number], err)
}

func (x *UpdateProductResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Success, offset, err = fastpb.ReadBool(buf, _type)
	return offset, err
}

func (x *GetProductReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetProductReq[number], err)
}

func (x *GetProductReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Id, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *GetProductResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetProductResp[number], err)
}

func (x *GetProductResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v Product
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Product = &v
	return offset, nil
}

func (x *DeleteProductReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_DeleteProductReq[number], err)
}

func (x *DeleteProductReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Id, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *DeleteProductResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_DeleteProductResp[number], err)
}

func (x *DeleteProductResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Success, offset, err = fastpb.ReadBool(buf, _type)
	return offset, err
}

func (x *ListProductsReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 6:
		offset, err = x.fastReadField6(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 7:
		offset, err = x.fastReadField7(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 8:
		offset, err = x.fastReadField8(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 9:
		offset, err = x.fastReadField9(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_ListProductsReq[number], err)
}

func (x *ListProductsReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Category, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *ListProductsReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Keyword, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *ListProductsReq) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.OnSaleOnly, offset, err = fastpb.ReadBool(buf, _type)
	return offset, err
}

func (x *ListProductsReq) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.Page, offset, err = fastpb.ReadInt32(buf, _type)
	return offset, err
}

func (x *ListProductsReq) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	x.PageSize, offset, err = fastpb.ReadInt32(buf, _type)
	return offset, err
}

func (x *ListProductsReq) fastReadField6(buf []byte, _type int8) (offset int, err error) {
	x.SortBy, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *ListProductsReq) fastReadField7(buf []byte, _type int8) (offset int, err error) {
	x.Ascending, offset, err = fastpb.ReadBool(buf, _type)
	return offset, err
}

func (x *ListProductsReq) fastReadField8(buf []byte, _type int8) (offset int, err error) {
	x.MinPrice, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *ListProductsReq) fastReadField9(buf []byte, _type int8) (offset int, err error) {
	x.MaxPrice, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *ListProductsResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_ListProductsResp[number], err)
}

func (x *ListProductsResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v Product
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Products = append(x.Products, &v)
	return offset, nil
}

func (x *ListProductsResp) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Total, offset, err = fastpb.ReadInt32(buf, _type)
	return offset, err
}

func (x *ListProductsResp) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Page, offset, err = fastpb.ReadInt32(buf, _type)
	return offset, err
}

func (x *ListProductsResp) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.PageSize, offset, err = fastpb.ReadInt32(buf, _type)
	return offset, err
}

func (x *ListProductsResp) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	x.TotalPages, offset, err = fastpb.ReadInt32(buf, _type)
	return offset, err
}

func (x *GetCategoriesReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
}

func (x *GetCategoriesResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetCategoriesResp[number], err)
}

func (x *GetCategoriesResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v string
	v, offset, err = fastpb.ReadString(buf, _type)
	if err != nil {
		return offset, err
	}
	x.Categories = append(x.Categories, v)
	return offset, err
}

func (x *UpdateStockReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_UpdateStockReq[number], err)
}

func (x *UpdateStockReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.ProductId, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *UpdateStockReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Quantity, offset, err = fastpb.ReadInt32(buf, _type)
	return offset, err
}

func (x *UpdateStockResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_UpdateStockResp[number], err)
}

func (x *UpdateStockResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Success, offset, err = fastpb.ReadBool(buf, _type)
	return offset, err
}

func (x *UpdateStockResp) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.CurrentStock, offset, err = fastpb.ReadInt32(buf, _type)
	return offset, err
}

func (x *Product) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	offset += x.fastWriteField6(buf[offset:])
	offset += x.fastWriteField7(buf[offset:])
	offset += x.fastWriteField8(buf[offset:])
	offset += x.fastWriteField9(buf[offset:])
	offset += x.fastWriteField10(buf[offset:])
	offset += x.fastWriteField11(buf[offset:])
	offset += x.fastWriteField12(buf[offset:])
	offset += x.fastWriteField13(buf[offset:])
	offset += x.fastWriteField14(buf[offset:])
	return offset
}

func (x *Product) fastWriteField1(buf []byte) (offset int) {
	if x.Id == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetId())
	return offset
}

func (x *Product) fastWriteField2(buf []byte) (offset int) {
	if x.Name == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetName())
	return offset
}

func (x *Product) fastWriteField3(buf []byte) (offset int) {
	if x.Description == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetDescription())
	return offset
}

func (x *Product) fastWriteField4(buf []byte) (offset int) {
	if x.Price == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 4, x.GetPrice())
	return offset
}

func (x *Product) fastWriteField5(buf []byte) (offset int) {
	if x.Stock == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 5, x.GetStock())
	return offset
}

func (x *Product) fastWriteField6(buf []byte) (offset int) {
	if x.ImageUrl == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 6, x.GetImageUrl())
	return offset
}

func (x *Product) fastWriteField7(buf []byte) (offset int) {
	if len(x.Gallery) == 0 {
		return offset
	}
	for i := range x.GetGallery() {
		offset += fastpb.WriteString(buf[offset:], 7, x.GetGallery()[i])
	}
	return offset
}

func (x *Product) fastWriteField8(buf []byte) (offset int) {
	if x.Category == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 8, x.GetCategory())
	return offset
}

func (x *Product) fastWriteField9(buf []byte) (offset int) {
	if !x.IsOnSale {
		return offset
	}
	offset += fastpb.WriteBool(buf[offset:], 9, x.GetIsOnSale())
	return offset
}

func (x *Product) fastWriteField10(buf []byte) (offset int) {
	if x.CreateTime == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 10, x.GetCreateTime())
	return offset
}

func (x *Product) fastWriteField11(buf []byte) (offset int) {
	if x.UpdateTime == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 11, x.GetUpdateTime())
	return offset
}

func (x *Product) fastWriteField12(buf []byte) (offset int) {
	if x.Attributes == nil {
		return offset
	}
	for k, v := range x.GetAttributes() {
		offset += fastpb.WriteMapEntry(buf[offset:], 12,
			func(buf []byte, numTagOrKey, numIdxOrVal int32) int {
				offset := 0
				offset += fastpb.WriteString(buf[offset:], numTagOrKey, k)
				offset += fastpb.WriteString(buf[offset:], numIdxOrVal, v)
				return offset
			})
	}
	return offset
}

func (x *Product) fastWriteField13(buf []byte) (offset int) {
	if x.Rating == 0 {
		return offset
	}
	offset += fastpb.WriteFloat(buf[offset:], 13, x.GetRating())
	return offset
}

func (x *Product) fastWriteField14(buf []byte) (offset int) {
	if x.SalesCount == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 14, x.GetSalesCount())
	return offset
}

func (x *CreateProductReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	offset += x.fastWriteField6(buf[offset:])
	offset += x.fastWriteField7(buf[offset:])
	offset += x.fastWriteField8(buf[offset:])
	offset += x.fastWriteField9(buf[offset:])
	return offset
}

func (x *CreateProductReq) fastWriteField1(buf []byte) (offset int) {
	if x.Name == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetName())
	return offset
}

func (x *CreateProductReq) fastWriteField2(buf []byte) (offset int) {
	if x.Description == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetDescription())
	return offset
}

func (x *CreateProductReq) fastWriteField3(buf []byte) (offset int) {
	if x.Price == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 3, x.GetPrice())
	return offset
}

func (x *CreateProductReq) fastWriteField4(buf []byte) (offset int) {
	if x.Stock == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 4, x.GetStock())
	return offset
}

func (x *CreateProductReq) fastWriteField5(buf []byte) (offset int) {
	if x.ImageUrl == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 5, x.GetImageUrl())
	return offset
}

func (x *CreateProductReq) fastWriteField6(buf []byte) (offset int) {
	if len(x.Gallery) == 0 {
		return offset
	}
	for i := range x.GetGallery() {
		offset += fastpb.WriteString(buf[offset:], 6, x.GetGallery()[i])
	}
	return offset
}

func (x *CreateProductReq) fastWriteField7(buf []byte) (offset int) {
	if x.Category == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 7, x.GetCategory())
	return offset
}

func (x *CreateProductReq) fastWriteField8(buf []byte) (offset int) {
	if !x.IsOnSale {
		return offset
	}
	offset += fastpb.WriteBool(buf[offset:], 8, x.GetIsOnSale())
	return offset
}

func (x *CreateProductReq) fastWriteField9(buf []byte) (offset int) {
	if x.Attributes == nil {
		return offset
	}
	for k, v := range x.GetAttributes() {
		offset += fastpb.WriteMapEntry(buf[offset:], 9,
			func(buf []byte, numTagOrKey, numIdxOrVal int32) int {
				offset := 0
				offset += fastpb.WriteString(buf[offset:], numTagOrKey, k)
				offset += fastpb.WriteString(buf[offset:], numIdxOrVal, v)
				return offset
			})
	}
	return offset
}

func (x *CreateProductResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *CreateProductResp) fastWriteField1(buf []byte) (offset int) {
	if x.ProductId == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetProductId())
	return offset
}

func (x *UpdateProductReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	offset += x.fastWriteField6(buf[offset:])
	offset += x.fastWriteField7(buf[offset:])
	offset += x.fastWriteField8(buf[offset:])
	offset += x.fastWriteField9(buf[offset:])
	offset += x.fastWriteField10(buf[offset:])
	return offset
}

func (x *UpdateProductReq) fastWriteField1(buf []byte) (offset int) {
	if x.Id == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetId())
	return offset
}

func (x *UpdateProductReq) fastWriteField2(buf []byte) (offset int) {
	if x.Name == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetName())
	return offset
}

func (x *UpdateProductReq) fastWriteField3(buf []byte) (offset int) {
	if x.Description == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetDescription())
	return offset
}

func (x *UpdateProductReq) fastWriteField4(buf []byte) (offset int) {
	if x.Price == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 4, x.GetPrice())
	return offset
}

func (x *UpdateProductReq) fastWriteField5(buf []byte) (offset int) {
	if x.Stock == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 5, x.GetStock())
	return offset
}

func (x *UpdateProductReq) fastWriteField6(buf []byte) (offset int) {
	if x.ImageUrl == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 6, x.GetImageUrl())
	return offset
}

func (x *UpdateProductReq) fastWriteField7(buf []byte) (offset int) {
	if len(x.Gallery) == 0 {
		return offset
	}
	for i := range x.GetGallery() {
		offset += fastpb.WriteString(buf[offset:], 7, x.GetGallery()[i])
	}
	return offset
}

func (x *UpdateProductReq) fastWriteField8(buf []byte) (offset int) {
	if x.Category == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 8, x.GetCategory())
	return offset
}

func (x *UpdateProductReq) fastWriteField9(buf []byte) (offset int) {
	if !x.IsOnSale {
		return offset
	}
	offset += fastpb.WriteBool(buf[offset:], 9, x.GetIsOnSale())
	return offset
}

func (x *UpdateProductReq) fastWriteField10(buf []byte) (offset int) {
	if x.Attributes == nil {
		return offset
	}
	for k, v := range x.GetAttributes() {
		offset += fastpb.WriteMapEntry(buf[offset:], 10,
			func(buf []byte, numTagOrKey, numIdxOrVal int32) int {
				offset := 0
				offset += fastpb.WriteString(buf[offset:], numTagOrKey, k)
				offset += fastpb.WriteString(buf[offset:], numIdxOrVal, v)
				return offset
			})
	}
	return offset
}

func (x *UpdateProductResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *UpdateProductResp) fastWriteField1(buf []byte) (offset int) {
	if !x.Success {
		return offset
	}
	offset += fastpb.WriteBool(buf[offset:], 1, x.GetSuccess())
	return offset
}

func (x *GetProductReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *GetProductReq) fastWriteField1(buf []byte) (offset int) {
	if x.Id == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetId())
	return offset
}

func (x *GetProductResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *GetProductResp) fastWriteField1(buf []byte) (offset int) {
	if x.Product == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetProduct())
	return offset
}

func (x *DeleteProductReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *DeleteProductReq) fastWriteField1(buf []byte) (offset int) {
	if x.Id == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetId())
	return offset
}

func (x *DeleteProductResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *DeleteProductResp) fastWriteField1(buf []byte) (offset int) {
	if !x.Success {
		return offset
	}
	offset += fastpb.WriteBool(buf[offset:], 1, x.GetSuccess())
	return offset
}

func (x *ListProductsReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	offset += x.fastWriteField6(buf[offset:])
	offset += x.fastWriteField7(buf[offset:])
	offset += x.fastWriteField8(buf[offset:])
	offset += x.fastWriteField9(buf[offset:])
	return offset
}

func (x *ListProductsReq) fastWriteField1(buf []byte) (offset int) {
	if x.Category == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetCategory())
	return offset
}

func (x *ListProductsReq) fastWriteField2(buf []byte) (offset int) {
	if x.Keyword == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetKeyword())
	return offset
}

func (x *ListProductsReq) fastWriteField3(buf []byte) (offset int) {
	if !x.OnSaleOnly {
		return offset
	}
	offset += fastpb.WriteBool(buf[offset:], 3, x.GetOnSaleOnly())
	return offset
}

func (x *ListProductsReq) fastWriteField4(buf []byte) (offset int) {
	if x.Page == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 4, x.GetPage())
	return offset
}

func (x *ListProductsReq) fastWriteField5(buf []byte) (offset int) {
	if x.PageSize == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 5, x.GetPageSize())
	return offset
}

func (x *ListProductsReq) fastWriteField6(buf []byte) (offset int) {
	if x.SortBy == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 6, x.GetSortBy())
	return offset
}

func (x *ListProductsReq) fastWriteField7(buf []byte) (offset int) {
	if !x.Ascending {
		return offset
	}
	offset += fastpb.WriteBool(buf[offset:], 7, x.GetAscending())
	return offset
}

func (x *ListProductsReq) fastWriteField8(buf []byte) (offset int) {
	if x.MinPrice == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 8, x.GetMinPrice())
	return offset
}

func (x *ListProductsReq) fastWriteField9(buf []byte) (offset int) {
	if x.MaxPrice == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 9, x.GetMaxPrice())
	return offset
}

func (x *ListProductsResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	return offset
}

func (x *ListProductsResp) fastWriteField1(buf []byte) (offset int) {
	if x.Products == nil {
		return offset
	}
	for i := range x.GetProducts() {
		offset += fastpb.WriteMessage(buf[offset:], 1, x.GetProducts()[i])
	}
	return offset
}

func (x *ListProductsResp) fastWriteField2(buf []byte) (offset int) {
	if x.Total == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 2, x.GetTotal())
	return offset
}

func (x *ListProductsResp) fastWriteField3(buf []byte) (offset int) {
	if x.Page == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 3, x.GetPage())
	return offset
}

func (x *ListProductsResp) fastWriteField4(buf []byte) (offset int) {
	if x.PageSize == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 4, x.GetPageSize())
	return offset
}

func (x *ListProductsResp) fastWriteField5(buf []byte) (offset int) {
	if x.TotalPages == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 5, x.GetTotalPages())
	return offset
}

func (x *GetCategoriesReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	return offset
}

func (x *GetCategoriesResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *GetCategoriesResp) fastWriteField1(buf []byte) (offset int) {
	if len(x.Categories) == 0 {
		return offset
	}
	for i := range x.GetCategories() {
		offset += fastpb.WriteString(buf[offset:], 1, x.GetCategories()[i])
	}
	return offset
}

func (x *UpdateStockReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *UpdateStockReq) fastWriteField1(buf []byte) (offset int) {
	if x.ProductId == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetProductId())
	return offset
}

func (x *UpdateStockReq) fastWriteField2(buf []byte) (offset int) {
	if x.Quantity == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 2, x.GetQuantity())
	return offset
}

func (x *UpdateStockResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *UpdateStockResp) fastWriteField1(buf []byte) (offset int) {
	if !x.Success {
		return offset
	}
	offset += fastpb.WriteBool(buf[offset:], 1, x.GetSuccess())
	return offset
}

func (x *UpdateStockResp) fastWriteField2(buf []byte) (offset int) {
	if x.CurrentStock == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 2, x.GetCurrentStock())
	return offset
}

func (x *Product) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	n += x.sizeField6()
	n += x.sizeField7()
	n += x.sizeField8()
	n += x.sizeField9()
	n += x.sizeField10()
	n += x.sizeField11()
	n += x.sizeField12()
	n += x.sizeField13()
	n += x.sizeField14()
	return n
}

func (x *Product) sizeField1() (n int) {
	if x.Id == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetId())
	return n
}

func (x *Product) sizeField2() (n int) {
	if x.Name == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetName())
	return n
}

func (x *Product) sizeField3() (n int) {
	if x.Description == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetDescription())
	return n
}

func (x *Product) sizeField4() (n int) {
	if x.Price == 0 {
		return n
	}
	n += fastpb.SizeInt64(4, x.GetPrice())
	return n
}

func (x *Product) sizeField5() (n int) {
	if x.Stock == 0 {
		return n
	}
	n += fastpb.SizeInt32(5, x.GetStock())
	return n
}

func (x *Product) sizeField6() (n int) {
	if x.ImageUrl == "" {
		return n
	}
	n += fastpb.SizeString(6, x.GetImageUrl())
	return n
}

func (x *Product) sizeField7() (n int) {
	if len(x.Gallery) == 0 {
		return n
	}
	for i := range x.GetGallery() {
		n += fastpb.SizeString(7, x.GetGallery()[i])
	}
	return n
}

func (x *Product) sizeField8() (n int) {
	if x.Category == "" {
		return n
	}
	n += fastpb.SizeString(8, x.GetCategory())
	return n
}

func (x *Product) sizeField9() (n int) {
	if !x.IsOnSale {
		return n
	}
	n += fastpb.SizeBool(9, x.GetIsOnSale())
	return n
}

func (x *Product) sizeField10() (n int) {
	if x.CreateTime == 0 {
		return n
	}
	n += fastpb.SizeInt64(10, x.GetCreateTime())
	return n
}

func (x *Product) sizeField11() (n int) {
	if x.UpdateTime == 0 {
		return n
	}
	n += fastpb.SizeInt64(11, x.GetUpdateTime())
	return n
}

func (x *Product) sizeField12() (n int) {
	if x.Attributes == nil {
		return n
	}
	for k, v := range x.GetAttributes() {
		n += fastpb.SizeMapEntry(12,
			func(numTagOrKey, numIdxOrVal int32) int {
				n := 0
				n += fastpb.SizeString(numTagOrKey, k)
				n += fastpb.SizeString(numIdxOrVal, v)
				return n
			})
	}
	return n
}

func (x *Product) sizeField13() (n int) {
	if x.Rating == 0 {
		return n
	}
	n += fastpb.SizeFloat(13, x.GetRating())
	return n
}

func (x *Product) sizeField14() (n int) {
	if x.SalesCount == 0 {
		return n
	}
	n += fastpb.SizeInt32(14, x.GetSalesCount())
	return n
}

func (x *CreateProductReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	n += x.sizeField6()
	n += x.sizeField7()
	n += x.sizeField8()
	n += x.sizeField9()
	return n
}

func (x *CreateProductReq) sizeField1() (n int) {
	if x.Name == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetName())
	return n
}

func (x *CreateProductReq) sizeField2() (n int) {
	if x.Description == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetDescription())
	return n
}

func (x *CreateProductReq) sizeField3() (n int) {
	if x.Price == 0 {
		return n
	}
	n += fastpb.SizeInt64(3, x.GetPrice())
	return n
}

func (x *CreateProductReq) sizeField4() (n int) {
	if x.Stock == 0 {
		return n
	}
	n += fastpb.SizeInt32(4, x.GetStock())
	return n
}

func (x *CreateProductReq) sizeField5() (n int) {
	if x.ImageUrl == "" {
		return n
	}
	n += fastpb.SizeString(5, x.GetImageUrl())
	return n
}

func (x *CreateProductReq) sizeField6() (n int) {
	if len(x.Gallery) == 0 {
		return n
	}
	for i := range x.GetGallery() {
		n += fastpb.SizeString(6, x.GetGallery()[i])
	}
	return n
}

func (x *CreateProductReq) sizeField7() (n int) {
	if x.Category == "" {
		return n
	}
	n += fastpb.SizeString(7, x.GetCategory())
	return n
}

func (x *CreateProductReq) sizeField8() (n int) {
	if !x.IsOnSale {
		return n
	}
	n += fastpb.SizeBool(8, x.GetIsOnSale())
	return n
}

func (x *CreateProductReq) sizeField9() (n int) {
	if x.Attributes == nil {
		return n
	}
	for k, v := range x.GetAttributes() {
		n += fastpb.SizeMapEntry(9,
			func(numTagOrKey, numIdxOrVal int32) int {
				n := 0
				n += fastpb.SizeString(numTagOrKey, k)
				n += fastpb.SizeString(numIdxOrVal, v)
				return n
			})
	}
	return n
}

func (x *CreateProductResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *CreateProductResp) sizeField1() (n int) {
	if x.ProductId == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetProductId())
	return n
}

func (x *UpdateProductReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	n += x.sizeField6()
	n += x.sizeField7()
	n += x.sizeField8()
	n += x.sizeField9()
	n += x.sizeField10()
	return n
}

func (x *UpdateProductReq) sizeField1() (n int) {
	if x.Id == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetId())
	return n
}

func (x *UpdateProductReq) sizeField2() (n int) {
	if x.Name == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetName())
	return n
}

func (x *UpdateProductReq) sizeField3() (n int) {
	if x.Description == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetDescription())
	return n
}

func (x *UpdateProductReq) sizeField4() (n int) {
	if x.Price == 0 {
		return n
	}
	n += fastpb.SizeInt64(4, x.GetPrice())
	return n
}

func (x *UpdateProductReq) sizeField5() (n int) {
	if x.Stock == 0 {
		return n
	}
	n += fastpb.SizeInt32(5, x.GetStock())
	return n
}

func (x *UpdateProductReq) sizeField6() (n int) {
	if x.ImageUrl == "" {
		return n
	}
	n += fastpb.SizeString(6, x.GetImageUrl())
	return n
}

func (x *UpdateProductReq) sizeField7() (n int) {
	if len(x.Gallery) == 0 {
		return n
	}
	for i := range x.GetGallery() {
		n += fastpb.SizeString(7, x.GetGallery()[i])
	}
	return n
}

func (x *UpdateProductReq) sizeField8() (n int) {
	if x.Category == "" {
		return n
	}
	n += fastpb.SizeString(8, x.GetCategory())
	return n
}

func (x *UpdateProductReq) sizeField9() (n int) {
	if !x.IsOnSale {
		return n
	}
	n += fastpb.SizeBool(9, x.GetIsOnSale())
	return n
}

func (x *UpdateProductReq) sizeField10() (n int) {
	if x.Attributes == nil {
		return n
	}
	for k, v := range x.GetAttributes() {
		n += fastpb.SizeMapEntry(10,
			func(numTagOrKey, numIdxOrVal int32) int {
				n := 0
				n += fastpb.SizeString(numTagOrKey, k)
				n += fastpb.SizeString(numIdxOrVal, v)
				return n
			})
	}
	return n
}

func (x *UpdateProductResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *UpdateProductResp) sizeField1() (n int) {
	if !x.Success {
		return n
	}
	n += fastpb.SizeBool(1, x.GetSuccess())
	return n
}

func (x *GetProductReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *GetProductReq) sizeField1() (n int) {
	if x.Id == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetId())
	return n
}

func (x *GetProductResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *GetProductResp) sizeField1() (n int) {
	if x.Product == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetProduct())
	return n
}

func (x *DeleteProductReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *DeleteProductReq) sizeField1() (n int) {
	if x.Id == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetId())
	return n
}

func (x *DeleteProductResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *DeleteProductResp) sizeField1() (n int) {
	if !x.Success {
		return n
	}
	n += fastpb.SizeBool(1, x.GetSuccess())
	return n
}

func (x *ListProductsReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	n += x.sizeField6()
	n += x.sizeField7()
	n += x.sizeField8()
	n += x.sizeField9()
	return n
}

func (x *ListProductsReq) sizeField1() (n int) {
	if x.Category == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetCategory())
	return n
}

func (x *ListProductsReq) sizeField2() (n int) {
	if x.Keyword == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetKeyword())
	return n
}

func (x *ListProductsReq) sizeField3() (n int) {
	if !x.OnSaleOnly {
		return n
	}
	n += fastpb.SizeBool(3, x.GetOnSaleOnly())
	return n
}

func (x *ListProductsReq) sizeField4() (n int) {
	if x.Page == 0 {
		return n
	}
	n += fastpb.SizeInt32(4, x.GetPage())
	return n
}

func (x *ListProductsReq) sizeField5() (n int) {
	if x.PageSize == 0 {
		return n
	}
	n += fastpb.SizeInt32(5, x.GetPageSize())
	return n
}

func (x *ListProductsReq) sizeField6() (n int) {
	if x.SortBy == "" {
		return n
	}
	n += fastpb.SizeString(6, x.GetSortBy())
	return n
}

func (x *ListProductsReq) sizeField7() (n int) {
	if !x.Ascending {
		return n
	}
	n += fastpb.SizeBool(7, x.GetAscending())
	return n
}

func (x *ListProductsReq) sizeField8() (n int) {
	if x.MinPrice == 0 {
		return n
	}
	n += fastpb.SizeInt64(8, x.GetMinPrice())
	return n
}

func (x *ListProductsReq) sizeField9() (n int) {
	if x.MaxPrice == 0 {
		return n
	}
	n += fastpb.SizeInt64(9, x.GetMaxPrice())
	return n
}

func (x *ListProductsResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	return n
}

func (x *ListProductsResp) sizeField1() (n int) {
	if x.Products == nil {
		return n
	}
	for i := range x.GetProducts() {
		n += fastpb.SizeMessage(1, x.GetProducts()[i])
	}
	return n
}

func (x *ListProductsResp) sizeField2() (n int) {
	if x.Total == 0 {
		return n
	}
	n += fastpb.SizeInt32(2, x.GetTotal())
	return n
}

func (x *ListProductsResp) sizeField3() (n int) {
	if x.Page == 0 {
		return n
	}
	n += fastpb.SizeInt32(3, x.GetPage())
	return n
}

func (x *ListProductsResp) sizeField4() (n int) {
	if x.PageSize == 0 {
		return n
	}
	n += fastpb.SizeInt32(4, x.GetPageSize())
	return n
}

func (x *ListProductsResp) sizeField5() (n int) {
	if x.TotalPages == 0 {
		return n
	}
	n += fastpb.SizeInt32(5, x.GetTotalPages())
	return n
}

func (x *GetCategoriesReq) Size() (n int) {
	if x == nil {
		return n
	}
	return n
}

func (x *GetCategoriesResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *GetCategoriesResp) sizeField1() (n int) {
	if len(x.Categories) == 0 {
		return n
	}
	for i := range x.GetCategories() {
		n += fastpb.SizeString(1, x.GetCategories()[i])
	}
	return n
}

func (x *UpdateStockReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *UpdateStockReq) sizeField1() (n int) {
	if x.ProductId == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetProductId())
	return n
}

func (x *UpdateStockReq) sizeField2() (n int) {
	if x.Quantity == 0 {
		return n
	}
	n += fastpb.SizeInt32(2, x.GetQuantity())
	return n
}

func (x *UpdateStockResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *UpdateStockResp) sizeField1() (n int) {
	if !x.Success {
		return n
	}
	n += fastpb.SizeBool(1, x.GetSuccess())
	return n
}

func (x *UpdateStockResp) sizeField2() (n int) {
	if x.CurrentStock == 0 {
		return n
	}
	n += fastpb.SizeInt32(2, x.GetCurrentStock())
	return n
}

var fieldIDToName_Product = map[int32]string{
	1:  "Id",
	2:  "Name",
	3:  "Description",
	4:  "Price",
	5:  "Stock",
	6:  "ImageUrl",
	7:  "Gallery",
	8:  "Category",
	9:  "IsOnSale",
	10: "CreateTime",
	11: "UpdateTime",
	12: "Attributes",
	13: "Rating",
	14: "SalesCount",
}

var fieldIDToName_CreateProductReq = map[int32]string{
	1: "Name",
	2: "Description",
	3: "Price",
	4: "Stock",
	5: "ImageUrl",
	6: "Gallery",
	7: "Category",
	8: "IsOnSale",
	9: "Attributes",
}

var fieldIDToName_CreateProductResp = map[int32]string{
	1: "ProductId",
}

var fieldIDToName_UpdateProductReq = map[int32]string{
	1:  "Id",
	2:  "Name",
	3:  "Description",
	4:  "Price",
	5:  "Stock",
	6:  "ImageUrl",
	7:  "Gallery",
	8:  "Category",
	9:  "IsOnSale",
	10: "Attributes",
}

var fieldIDToName_UpdateProductResp = map[int32]string{
	1: "Success",
}

var fieldIDToName_GetProductReq = map[int32]string{
	1: "Id",
}

var fieldIDToName_GetProductResp = map[int32]string{
	1: "Product",
}

var fieldIDToName_DeleteProductReq = map[int32]string{
	1: "Id",
}

var fieldIDToName_DeleteProductResp = map[int32]string{
	1: "Success",
}

var fieldIDToName_ListProductsReq = map[int32]string{
	1: "Category",
	2: "Keyword",
	3: "OnSaleOnly",
	4: "Page",
	5: "PageSize",
	6: "SortBy",
	7: "Ascending",
	8: "MinPrice",
	9: "MaxPrice",
}

var fieldIDToName_ListProductsResp = map[int32]string{
	1: "Products",
	2: "Total",
	3: "Page",
	4: "PageSize",
	5: "TotalPages",
}

var fieldIDToName_GetCategoriesReq = map[int32]string{}

var fieldIDToName_GetCategoriesResp = map[int32]string{
	1: "Categories",
}

var fieldIDToName_UpdateStockReq = map[int32]string{
	1: "ProductId",
	2: "Quantity",
}

var fieldIDToName_UpdateStockResp = map[int32]string{
	1: "Success",
	2: "CurrentStock",
}

var _ = api.File_api_proto
