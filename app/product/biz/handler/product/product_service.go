// Code generated by hertz generator.

package product

import (
	"context"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	product "zqzqsb/gomall/app/product/kitex_gen/product"
)

// CreateProduct .
// @router /admin/products [POST]
func CreateProduct(ctx context.Context, c *app.RequestContext) {
	var err error
	var req product.CreateProductReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(product.CreateProductResp)

	c.JSON(consts.StatusOK, resp)
}

// UpdateProduct .
// @router /admin/products/{id} [PUT]
func UpdateProduct(ctx context.Context, c *app.RequestContext) {
	var err error
	var req product.UpdateProductReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(product.UpdateProductResp)

	c.JSON(consts.StatusOK, resp)
}

// GetProduct .
// @router /products/{id} [GET]
func GetProduct(ctx context.Context, c *app.RequestContext) {
	var err error
	var req product.GetProductReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(product.GetProductResp)

	c.JSON(consts.StatusOK, resp)
}

// DeleteProduct .
// @router /admin/products/{id} [DELETE]
func DeleteProduct(ctx context.Context, c *app.RequestContext) {
	var err error
	var req product.DeleteProductReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(product.DeleteProductResp)

	c.JSON(consts.StatusOK, resp)
}

// ListProducts .
// @router /products [GET]
func ListProducts(ctx context.Context, c *app.RequestContext) {
	var err error
	var req product.ListProductsReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(product.ListProductsResp)

	c.JSON(consts.StatusOK, resp)
}

// GetCategories .
// @router /products/categories [GET]
func GetCategories(ctx context.Context, c *app.RequestContext) {
	var err error
	var req product.GetCategoriesReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(product.GetCategoriesResp)

	c.JSON(consts.StatusOK, resp)
}
